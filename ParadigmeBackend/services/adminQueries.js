
var db = require('../utils/connection');
 

module.exports = {
    getUsersEmail: "SELECT * FROM users WHERE email = ? and is_admin=1",
    getFooter : "SELECT * FROM web_footer",
    getWebContent : "SELECT * FROM web_content",
    updateFooter : "update web_footer SET description=?,email=?,contact=?", 
    updateWallet : "update user_wallet set ? where user_id =?",
    verifyPhysicalNft : "update item set ? where id =?",

    updateWebContent : "update web_content SET ?",
    getUsers : "SELECT us.id,us.is_active,us.full_name,us.address,us.email,us.is_email_verify,us.country_id,us.user_name,us.deactivate_account, ct.id as country_id,ct.name as country_name,us.is_featured,case when us.telent_status=0 then 'Pending' when us.telent_status=1 then 'Approved' when us.telent_status=2 then 'Rejected' else 'Not Applied' end as telent_status_name, us.telent_status from users as us  LEFT JOIN country as ct ON ct.id = us.country_id  where us.deactivate_account=0 and us.id<>1 ORDER BY us.id DESC", 
    getSingleUser : "Select * from users where id =?",
    insertCategory : "insert into item_category SET ?",
    deleteCategory : "DELETE FROM item_category WHERE id =?",
    updateCategory : "update item_category SET ? where id =?",
    updateUser : "update users SET ? where id =?",
    Category : "Select ic.id,ic.name,nt.name as nft_type,nt.id as nft_type_id from item_category as ic left join nft_type as nt on nt.id=ic.nft_type_id",
    getDigitalCategory : "Select ic.id,ic.name,nt.name as nft_type,nt.id as nft_type_id from item_category as ic left join nft_type as nt on nt.id=ic.nft_type_id where ic.nft_type_id=1 and ic.id in (1,2,3)",
    getUserDigitalCategory : "Select ic.id,ic.name,nt.name as nft_type,nt.id as nft_type_id from item_category as ic left join nft_type as nt on nt.id=ic.nft_type_id where ic.nft_type_id=1 and ic.id in (1,2,3)",
    getRealEstateCategory :"Select id,name from item_category where nft_type_id=2 limit 8",
    getUserRealEstateCategory :"Select id,name from item_category where nft_type_id=2 and id in(5,6,7,8)",
    singleCategory : "Select ic.id,ic.name,nt.name as nft_type,nt.id as nft_type_id from item_category as ic left join nft_type as nt on nt.id=ic.nft_type_id where ic.id=?",
    getNftType : "select * from nft_type",
    insertItem : "insert into item SET ?",
    deleteItem : "Delete from item where id =?",
    updateItem : "update item SET ? where id =?",
    getItem : "Select i.id,ie.id as item_edition_id,ie.edition_text,i.name,i.description,i.image,i.file_type,i.owner,i.item_category_id,i.quantity,ic.name as item_category,i.token_id,ie.price,i.is_active,ie.is_sold,ie.expiry_date from item_edition as ie left join item as i on i.id=ie.item_id left join item_category as ic on ic.id=i.item_category_id where ie.id in (select min(id) from item_edition where is_sold=0 group by item_id,owner_id) and i.is_active=1 and (ie.expiry_date >= now() or ie.expiry_date is null) and i.nft_type_id=1 and coalesce(ie.start_date,now())<=now() ORDER BY i.id DESC", 
    getAdminItem : "Select users.full_name as owner_name,cu.full_name as creator_name,i.is_banner,cu.id as creator_id, i.id,i.is_featured,i.royalty_percent,i.is_physical_approved,i.nft_type_select,i.owner_id,i.verified_tag,i.name,i.description, i.blockchainType ,i.is_on_sale,i.image,i.file_type,i.item_category_id,i.quantity,ic.name as item_category,i.token_id,i.price,i.is_active,i.is_sold,i.expiry_date from item as i left join item_category as ic on ic.id=i.item_category_id left JOIN users ON i.owner_id=users.id left join users as cu on cu.id=i.created_by where created_by != 1 ORDER BY i.id DESC",
    getAdminNFT : "Select i.id,i.is_featured,i.is_banner,i.name,i.owner_id,i.sell_type, i.blockchainType,i.user_collection_id,i.is_trending,i.is_on_sale, i.image,i.description,i.local_image,i.file_type,i.owner,i.item_category_id,i.quantity,ic.name as item_category,i.token_id,i.price,i.is_active,i.is_sold,i.expiry_date from item as i left join item_category as ic on ic.id=i.item_category_id where i.owner_id=1 ORDER BY i.id DESC",
  //  listSingleItem : "Select i.id,i.name,i.description,i.image,i.owner,i.item_category_id,ic.name as category_name,i.token_id,i.price from item as i left join item_category as ic on ic.id=i.item_category_id where i.id = ? ",
     listSingleItem : "Select ie.id as item_edition_id,i.id as item_id,i.name,i.description,i.image,i.file_type,i.owner,i.item_category_id,ic.name as category_name,i.token_id,i.price from item_edition as ie left join item as i on i.id=ie.item_id left join item_category as ic on ic.id=i.item_category_id where ie.id = ? and (ie.expiry_date >= now() or i.expiry_date is null)",
    dashItem : "select getTotalSoldNFT() as totalSoldNFT, getTotalRoyalties() as totalRoyalties, getTotalRevenueForSale() as totalRevenuew, getTotalBidsOfItems() as totalBidsOfItems, sum(total_nft) as total_nft, sum(price_nft) as price_nft,sum(auction_nft) as auction_nft,sum(collection_count) as collection_count,sum(category_count) as category_count from (select count(id) as total_nft,sum(case when sell_type=1 then 1 else 0 end) as price_nft,sum(case when sell_type=2 then 1 else 0 end) as auction_nft, 0 as collection_count,0 as category_count from item union all select 0 as total_nft,0 as price_nft, 0 as auction_nft,count(id) as collection_count,0 as category_count from user_collection union all select 0 as total_nft,0 as price_nft, 0 as auction_nft,0 as collection_count,count(id) as category_count from item_category ) as a;",

    deleteUser : "Update users set deactivate_account=1,email=concat(email,'_Deleted') WHERE id =?",
    getProfile :  "Select full_name,email, profile_pic from users where email=? and  is_admin=1",
    updateProfile : "update users SET profile_pic=?, full_name = ? where email=? and is_admin=1",
    getPassword : "Select password from users where email =? and is_admin=1",
    updatepassword : "update users SET password=? where email=? and is_admin=1",

    updateWebImage : "update web_images SET ? where id =?",
    createUserWallet : "insert into user_wallet SET ?",
    insertEdition : "insert into item_edition SET ?",
    getAllCollection : "SELECT id,is_hide, is_featured, is_verified, user_id, name, description, datetime, facebook, insta, twitter, profile_pic, banner FROM user_collection WHERE user_id != 1 ORDER BY id DESC",
    getAdminCollection : "SELECT *, getAllCollectionItem(id) as nftCount FROM `user_collection` where user_id = 1 ORDER BY id DESC",
    updateAdminCollection : "UPDATE user_collection SET ? where id = ?",
    deleteAdminCollection : "DELETE from user_collection WHERE id = ?",
    getTransactionHistory : "SELECT amount, currency, to_address, datetime from transaction",
    getPrivacypolicy : "SELECT * From privacy_policy",
    updateprivacyAndPolicy : "UPDATE privacy_policy SET ? WHERE id = ?",
    updateTransaction : "UPDATE item SET ? WHERE id = ?",

    getTermsConditions : "SELECT * from terms_conditions",
    updateTermsConditions : "UPDATE terms_conditions SET ? WHERE id = ?",
    getAbout : "SELECT * from about",
    updateAbout : "UPDATE about SET ? WHERE id = ?",
    getAddress : "SELECT public from user_wallet",
    getSingleUserDetail  : "SELECT dob, phone, description, googleAuthCode from users where id = ?",
    getUserTransaction : "select t.id as transaction_id,tt.name as transaction_type, u.id as user_id,u.full_name,u.email,i.id as item_id,i.name as item_name,i.description,i.image,i.file_type,round(t.amount,2) as price,date_format(i.datetime,'%d-%M-%y') as nft_datetime,date_format(t.datetime,'%d-%M-%y') as purchase_datetime,cu.full_name as creator from item as i inner join transaction as t on t.item_id=i.id and t.user_id=? and t.status=1 left join users as u on u.id=i.owner_id left join users as cu on cu.id=i.created_by left join transaction_type as tt on tt.id=t.transaction_type_id where t.user_id=? order by t.id desc",
    insertSupport : "INSERT into support SET ?",
    updateSupport : "UPDATE support SET ? WHERE id = ?",
    deleteSupport : "DELETE FROM support WHERE id =?",
    supportList:"select s.id as support_id,sc.name as support_category, s.question,s.answer from support as s left join support_category as sc on sc.id=s.category_id order by s.id DESC",
    supportListById:"select s.id as support_id,sc.id as category_id,sc.name as support_category, s.question,s.answer from support as s left join support_category as sc on sc.id=s.category_id where s.id=?",
    getSupportCategory:"select * from support_category order by id",
    getWithdrawHistory : "SELECT to_address, amount, currency, datetime from transaction WHERE user_id = 1",
    getFees : "SELECT single_nft_fee, bid_increase_percentage,admin_commission from settings",
    updateFees : "UPDATE settings SET bid_increase_percentage = ?,admin_commission = ? WHERE  id = ?",
    getTransactionFee : "SELECT sale_price_percent, minimum_transaction_fee from settings",
    getAllTransaction : "select t.to_address,t.amount, t.currency,t.datetime,tt.name as transaction_type,ts.name as transaction_status from transaction as t left join transaction_type as tt on tt.id=t.transaction_type_id left join transaction_status as ts on ts.id=t.status",
    // deleteUserCollection : "DELETE from user_collection WHERE id = ?",
    insertAdminCollection : "INSERT into user_collection SET ?",
    getCollectionItemCount : "select count(id) as itemCount from item where user_collection_id=?",
    deleteUserCollection : "Delete from user_collection where id=?",
    getTransactionFilter : "SELECT * FROM `transaction_type` where id in (select distinct transaction_type_id from transaction)",
    addUserCollectionFeatured : "update user_collection SET ? where id =?",
    addAdminCollectionFeatured : "update user_collection SET ? where id =?",
    addUserNftFeatured : "update item SET ? where id =?",
    addAdminNftFeatured : "update item SET is_featured=? where id =?",
    userActivate : "update users SET is_active = 1 where id=?",
    userInactive : "update users SET is_active = 0 where id=?",
    userCollectionVerifiedTag : "update user_collection SET ? where id = ?",
    updateItem : "update item set ? where id = ?",
    addOnSale : "UPDATE item SET ? WHERE id = ?",
    getOnSale : "SELECT name, type From is_on_sale",
    getUserNftById  : "SELECT name, description, price, image FROM item WHERE id = ?",
    hideCollection : "UPDATE user_collection SET ? WHERE id = ?",
    showCollection : "UPDATE user_collection SET ? WHERE id = ?",
    updateTransactionFee : "UPDATE settings SET sale_price_percent = ?, minimum_transaction_fee = ? WHERE id = ?",
    getWalletDetail : "select u.user_name, uw.user_id,uw.wallet_name,uw.wallet_password,uw.public,uw.private,coalesce(sum(t.amount),0) as balance from user_wallet as uw left join transaction as t on t.user_id=uw.user_id and t.status=1 and transaction_type_id in (1,6,3,5,10,8,11) left join users as u on uw.user_id=u.id where uw.user_id= ? group by uw.user_id,uw.public ",
    userWallet : "Select * from user_wallet where user_id =?",
    insertSingleNFTAttribute : "insert into item_attributes SET ?",
    gamesCategory : "SELECT id,name from games_category",
    updateGamesCategory : "update games_category set ? where id =?",
    deleteGamesCategory : "DELETE FROM games_category WHERE id =?",
    insertGamesCategory : "insert into games_category SET ?",
    singleGamesCategory :"SELECT id,name from games_category where id =?"

}